## Project Intelligence

### Code Styling Rules
- Keep entry point files minimal, serving only as entrypoints
- Organize code into logical modules/packages/directories
- Keep files under 300 lines by splitting into multiple files
- Group small utility functions in utility modules
- Each exported function/method requires detailed documentation comments
- Format code according to language standards before committing
- Make frequent, small git commits while coding to create recovery points
- Use git checkout [commit-hash] -- path/to/file to recover accidentally deleted code
- Group imports according to language-specific best practices
- Break up large modules into multiple files with clear responsibilities

### Project Structure
- Define key components in the README.md
- Separate core logic from UI and data layers
- Place documentation in docs/
- Configuration in config/
- Unit tests alongside the code they test
- Integration tests in separate test/ directory

### Logging Best Practices
- Use structured logging
- Initialize logger at appropriate scope
- Use appropriate log levels (debug, info, warn, error)
- Include context with log entries
- When viewing logs:
  - Always use appropriate flags to limit log output
  - Never use follow/tail flags in scripts as these commands never return
  - Use reasonable log size limits

### Documentation Standards
- Document all public functions, classes, and modules
- Use consistent formatting for comments
- Include examples for complex functions
- Keep README.md up to date with usage instructions
- Document configuration options and their effects
- Create CONTRIBUTING.md for collaboration guidelines

### Testing Requirements
- Write tests for all modules
- Maintain high test coverage for core logic
- Use table-driven or parameterized tests for multiple test cases
- Mock external dependencies
- Name tests clearly to indicate test purpose
- Add performance tests for critical sections
- Include integration tests for end-to-end verification

### Error Handling
- Always check error returns
- Provide context when propagating errors
- Use appropriate error types for domain-specific errors
- Include appropriate logging with error context
- Return/throw early on errors to avoid deep nesting
- Consider implementing custom error types when appropriate

### Performance Considerations
- Use profiling tools for optimization
- Benchmark before and after optimizations
- Consider memory usage for large data structures
- Implement pooling for frequently allocated objects
- Use concurrency or parallelism appropriately
- Be aware of garbage collection impact where applicable
- Implement appropriate locking for shared resources

### Security Practices
- Validate all user inputs
- Use prepared statements for database queries
- Implement proper authentication and authorization
- Follow the principle of least privilege
- Keep dependencies updated
- Scan for vulnerabilities regularly
- Avoid hard-coded secrets
